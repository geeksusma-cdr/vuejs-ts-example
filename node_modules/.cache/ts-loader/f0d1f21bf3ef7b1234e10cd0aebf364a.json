{"remainingRequest":"/Users/geeksusma/vuejs-ts-example/node_modules/thread-loader/dist/cjs.js!/Users/geeksusma/vuejs-ts-example/node_modules/ts-loader/index.js??ref--12-2!/Users/geeksusma/vuejs-ts-example/src/store.ts","dependencies":[{"path":"/Users/geeksusma/vuejs-ts-example/src/store.ts","mtime":1626086079874},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/cache-loader/dist/cjs.js","mtime":1625758098049},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/thread-loader/dist/cjs.js","mtime":1625758098066},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/ts-loader/index.js","mtime":1625758098083}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gInRzbGliIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgaW5qZWN0LCByZWFjdGl2ZSwgcmVhZG9ubHkgfSBmcm9tICd2dWUnOwpleHBvcnQgdmFyIHN0b3JlS2V5ID0gU3ltYm9sKCdzdG9yZScpOwp2YXIgU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBTdG9yZShpbml0aWFsKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IHJlYWN0aXZlKGluaXRpYWwpOwogICAgfQogICAgU3RvcmUucHJvdG90eXBlLmluc3RhbGwgPSBmdW5jdGlvbiAoYXBwKSB7CiAgICAgICAgYXBwLnByb3ZpZGUoc3RvcmVLZXksIHRoaXMpOwogICAgfTsKICAgIFN0b3JlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gcmVhZG9ubHkodGhpcy5zdGF0ZSk7CiAgICB9OwogICAgU3RvcmUucHJvdG90eXBlLmNyZWF0ZVBvc3QgPSBmdW5jdGlvbiAocG9zdCkgewogICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBheGlvcy5wb3N0KCcvcG9zdHMnLCBwb3N0KV07CiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wb3N0cy5hbGwuc2V0KHJlc3BvbnNlLmRhdGEuaWQsIHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnBvc3RzLmlkcy5wdXNoKHJlc3BvbnNlLmRhdGEuaWQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKICAgIFN0b3JlLnByb3RvdHlwZS51cGRhdGVQb3N0ID0gZnVuY3Rpb24gKHBvc3QpIHsKICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByZXNwb25zZTsKICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgYXhpb3MucHV0KCcvcG9zdHMnLCBwb3N0KV07CiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wb3N0cy5hbGwuc2V0KHJlc3BvbnNlLmRhdGEuaWQsIHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKICAgIFN0b3JlLnByb3RvdHlwZS5jcmVhdGVVc2VyID0gZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByZXNwb25zZTsKICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgYXhpb3MucG9zdCgnL3VzZXJzJywgdXNlcildOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYXV0aG9ycy5hbGwuc2V0KHJlc3BvbnNlLmRhdGEuaWQsIHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmF1dGhvcnMuaWRzLnB1c2gocmVzcG9uc2UuZGF0YS5pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYXV0aG9ycy5jdXJyZW50VXNlcklkID0gcmVzcG9uc2UuZGF0YS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGF0ZS5hdXRob3JzKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CiAgICBTdG9yZS5wcm90b3R5cGUuc2lnbkluID0gZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByZXNwb25zZTsKICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgYXhpb3MucG9zdCgnL3NpZ25faW4nLCB1c2VyKV07CiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hdXRob3JzLmFsbC5zZXQoJzEnLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hdXRob3JzLmlkcy5wdXNoKCcxJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYXV0aG9ycy5jdXJyZW50VXNlcklkID0gJzEnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKICAgIFN0b3JlLnByb3RvdHlwZS5mZXRjaFBvc3RzID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlLCBwb3N0c1N0YXRlLCBfaSwgX2EsIHBvc3Q7CiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGF4aW9zLmdldCgnL3Bvc3RzJyldOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYi5zZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RzU3RhdGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHM6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsOiBuZXcgTWFwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYSA9IHJlc3BvbnNlLmRhdGE7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ID0gX2FbX2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdHNTdGF0ZS5pZHMucHVzaChwb3N0LmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RzU3RhdGUuYWxsLnNldChwb3N0LmlkLCBwb3N0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnBvc3RzID0gcG9zdHNTdGF0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CiAgICBTdG9yZS5wcm90b3R5cGUuc2lnbk91dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnN0YXRlLmF1dGhvcnMuY3VycmVudFVzZXJJZCA9IHVuZGVmaW5lZDsKICAgIH07CiAgICByZXR1cm4gU3RvcmU7Cn0oKSk7CmV4cG9ydCB7IFN0b3JlIH07CnZhciBhbGwgPSBuZXcgTWFwKCk7CmV4cG9ydCB2YXIgc3RvcmUgPSBuZXcgU3RvcmUoewogICAgYXV0aG9yczogewogICAgICAgIGFsbDogbmV3IE1hcCgpLAogICAgICAgIGlkczogW10sCiAgICAgICAgbG9hZGVkOiBmYWxzZSwKICAgICAgICBjdXJyZW50VXNlcklkOiAnMScKICAgIH0sCiAgICBwb3N0czogewogICAgICAgIGFsbDogYWxsLAogICAgICAgIGlkczogW10sCiAgICAgICAgbG9hZGVkOiBmYWxzZQogICAgfQp9KTsKLy8gdXNlCi8vIGNvbXBvc2FibGVzCi8vIHByb3ZpZGUgaW5qZWN0CmV4cG9ydCBmdW5jdGlvbiB1c2VTdG9yZSgpIHsKICAgIHZhciBfc3RvcmUgPSBpbmplY3Qoc3RvcmVLZXkpOwogICAgaWYgKCFfc3RvcmUpIHsKICAgICAgICB0aHJvdyBFcnJvcignRGlkIHlvdSBmb3Jnb3QgdG8gY2FsbCBwcm92aWRlPycpOwogICAgfQogICAgcmV0dXJuIF9zdG9yZTsKfQpzdG9yZS5nZXRTdGF0ZSgpLnBvc3RzLmxvYWRlZDsK"},{"version":3,"file":"/Users/geeksusma/vuejs-ts-example/src/store.ts","sourceRoot":"","sources":["/Users/geeksusma/vuejs-ts-example/src/store.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { App, inject, reactive, readonly } from 'vue'\nimport { Post } from './mocks'\n\nexport interface User {\n    id: string\n    username: string\n    password: string\n}\n\nexport type Author = Omit<User, 'password'>\n\ninterface BaseState<T> {\n    // o(n)\n    ids: string[] // [1, 2, 3, 4]\n\n    // o(1)\n    all: Map<string, T>\n\n    loaded: boolean\n}\n\ntype PostsState = BaseState<Post>\ninterface AuthorsState extends BaseState<Author> {\n    currentUserId: string | undefined\n}\n\nexport interface State {\n    authors: AuthorsState\n    posts: PostsState\n}\n\nexport const storeKey = Symbol('store')\n\nexport class Store {\n    private state: State\n\n    constructor(initial: State) {\n        this.state = reactive(initial)\n    }\n\n    install(app: App) {\n        app.provide(storeKey, this)\n    }\n\n    getState() {\n        return readonly(this.state)\n    }\n\n    async createPost(post: Post) {\n        const response = await axios.post<Post>('/posts', post)\n        this.state.posts.all.set(response.data.id, response.data)\n        this.state.posts.ids.push(response.data.id)\n    }\n\n    async updatePost(post: Post) {\n        const response = await axios.put<Post>('/posts', post)\n        this.state.posts.all.set(response.data.id, response.data)\n    }\n\n    async createUser(user: User) {\n        const response = await axios.post<Author>('/users', user)\n        this.state.authors.all.set(response.data.id, response.data)\n        this.state.authors.ids.push(response.data.id)\n        this.state.authors.currentUserId = response.data.id\n        console.log(this.state.authors)\n    }\n\n    async signIn(user: User) {\n        // hard code test user as id: 1\n        const response = await axios.post<Author>('/sign_in', user)\n        this.state.authors.all.set('1', response.data)\n        this.state.authors.ids.push('1')\n        this.state.authors.currentUserId = '1'\n    }\n\n    async fetchPosts() {\n        const response = await axios.get<Post[]>('/posts')\n        const postsState: PostsState = {\n            ids: [],\n            all: new Map,\n            loaded: true\n        }\n\n        for (const post of response.data) {\n            postsState.ids.push(post.id)\n            postsState.all.set(post.id, post)\n        }\n\n        this.state.posts = postsState\n    }\n\n    signOut() {\n        this.state.authors.currentUserId = undefined\n    }\n}\n\nconst all = new Map<string, Post>()\n\nexport const store = new Store({\n    authors: {\n        all: new Map<string, Author>(),\n        ids: [],\n        loaded: false,\n        currentUserId: '1'\n    },\n    posts: {\n        all,\n        ids: [],\n        loaded: false\n    }\n})\n\n// use\n// composables\n// provide inject\nexport function useStore(): Store {\n    const _store = inject<Store>(storeKey)\n    if (!_store) {\n        throw Error('Did you forgot to call provide?')\n    }\n\n    return _store\n}\n\nstore.getState().posts.loaded"]}]}