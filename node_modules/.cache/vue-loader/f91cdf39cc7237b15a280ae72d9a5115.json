{"remainingRequest":"/Users/geeksusma/vuejs-ts-example/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/geeksusma/vuejs-ts-example/src/components/PostWriter.vue?vue&type=style&index=0&id=3eb32f42&lang=css","dependencies":[{"path":"/Users/geeksusma/vuejs-ts-example/src/components/PostWriter.vue","mtime":1626085608605},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/css-loader/dist/cjs.js","mtime":1625758104118},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1625817642607},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/postcss-loader/src/index.js","mtime":1625758104354},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/cache-loader/dist/cjs.js","mtime":1625758098049},{"path":"/Users/geeksusma/vuejs-ts-example/node_modules/vue-loader-v16/dist/index.js","mtime":1625817642607}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb2x1bW4gewogICAgb3ZlcmZsb3cteTogc2Nyb2xsOwp9CiNtYXJrZG93biB7CiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7Cn0K"},{"version":3,"sources":["/Users/geeksusma/vuejs-ts-example/src/components/PostWriter.vue"],"names":[],"mappings":";AA0GA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB","file":"/Users/geeksusma/vuejs-ts-example/src/components/PostWriter.vue","sourceRoot":"","sourcesContent":["<template>\n    <div class=\"columns\">\n        <div class=\"column\">\n            <div class=\"field\">\n                <div class=\"label\">New Post</div>\n                <input type=\"text\" class=\"input\" v-model=\"title\" data-test=\"title\" />\n            </div>\n        </div>\n    </div>\n\n    <div class=\"columns\">\n        <div class=\"column\">\n            <div\n                contenteditable\n                id=\"markdown\"\n                ref=\"contentEditable\"\n                @input=\"handleInput\"\n                data-test=\"content\"\n            />\n        </div>\n        <div class=\"column\">\n            <div v-html=\"html\" />\n        </div>\n    </div>\n\n    <div class=\"columns\">\n        <div class=\"column\">\n            <button\n                @click=\"save\"\n                class=\"button is-primary is-pulled-right\"\n                data-test=\"submit\"\n            >Submit</button>\n        </div>\n    </div>\n</template>\n  \n  <script lang=\"ts\">\nimport { Post } from '../mocks';\nimport { defineComponent, onMounted, ref, watch, watchEffect } from 'vue';\nimport { parse } from 'marked'\nimport highlight from 'highlight.js'\nimport debounce from 'lodash/debounce'\nimport { useStore } from '@/store';\nexport default defineComponent({\n    props: {\n        post: {\n            type: Object as () => Post,\n            required: true\n        }\n    },\n    emits: {\n        save: (post: Post) => {\n            return true\n        }\n    },\n    setup(props, ctx) {\n        const title = ref(props.post.title)\n        const content = ref(props.post.markdown || '')\n        const html = ref('')\n        const parseHtml = (str: string) => {\n            html.value = parse(str, {\n                gfm: true,\n                breaks: true,\n                highlight: (code: string) => {\n                    return highlight.highlightAuto(code).value\n                }\n            })\n        }\n        watch(content, debounce((newVal) => {\n            parseHtml(newVal)\n        }, 250), { immediate: true })\n        const contentEditable = ref<HTMLDivElement | null>(null)\n        const handleInput = () => {\n            if (!contentEditable.value) {\n                throw Error('This should never happen')\n            }\n            content.value = contentEditable.value.innerText || ''\n        }\n        onMounted(() => {\n            if (!contentEditable.value) {\n                throw Error('This should never happen')\n            }\n            contentEditable.value.innerText = content.value\n        })\n        const save = () => {\n            const newPost: Post = {\n                ...props.post,\n                title: title.value,\n                html: html.value,\n                markdown: content.value,\n            }\n            ctx.emit('save', newPost)\n        }\n        return {\n            save,\n            html,\n            title,\n            handleInput,\n            content,\n            contentEditable\n        }\n    }\n});\n</script>\n  \n  <style>\n.column {\n    overflow-y: scroll;\n}\n#markdown {\n    white-space: pre-wrap;\n}\n</style>"]}]}